// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=createWindow_ae437130da
ROOST_METHOD_SIG_HASH=createWindow_bfe8572e87


*/

// ********RoostGPT********
import { createWindow } from '../src/main/index';
import { app, BrowserWindow } from 'electron';
import path from 'path';
import isDev from 'electron-is-dev';

jest.mock('electron', () => ({
  app: {
    getAppPath: jest.fn()
  },
  BrowserWindow: jest.fn()
}));

jest.mock('electron-is-dev', () => jest.fn());

jest.mock('path', () => ({
  join: jest.fn()
}));

describe('createWindow function', () => {
  beforeEach(() => {
    BrowserWindow.mockClear();
    app.getAppPath.mockClear();
    path.join.mockClear();
    isDev.mockClear();
  });

  test('should correctly create a new window', () => {
    app.getAppPath.mockReturnValue('appPath');
    path.join.mockImplementation((...args) => args.join('/'));

    createWindow();

    expect(BrowserWindow).toHaveBeenCalledTimes(1);
    expect(BrowserWindow).toHaveBeenCalledWith({
      width: 800,
      minWidth: 320,
      height: 600,
      fullscreenable: true,
      backgroundColor: "#403F4D",
      icon: 'appPath/assets/png/128x128.png',
      webPreferences: {
        preload: 'appPath/dist/preload/index.cjs'
      }
    });
  });

  test('should load correct URL based on environment', () => {
    app.getAppPath.mockReturnValue('appPath');
    path.join.mockImplementation((...args) => args.join('/'));

    const mainWindowInstance = {
      loadURL: jest.fn()
    };
    BrowserWindow.mockReturnValue(mainWindowInstance);

    // Test in development environment
    isDev.mockReturnValue(true);
    createWindow();
    expect(mainWindowInstance.loadURL).toHaveBeenCalledWith('http://localhost:5173');

    // Test in production environment
    isDev.mockReturnValue(false);
    createWindow();
    expect(mainWindowInstance.loadURL).toHaveBeenCalledWith(new URL("../dist/renderer/index.html", "file://appPath").toString());
  });
});
